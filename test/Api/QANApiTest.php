<?php
/**
 * QANApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  qan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace qan\Test\Api;

use \qan\Configuration;
use \qan\ApiException;
use \qan\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * QANApiTest Class Doc Comment
 *
 * @category Class
 * @package  qan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class QANApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for qanBlockNumber
     *
     * Returns the latest block number of the blockchain..
     *
     */
    public function testQanBlockNumber()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanCall
     *
     * Executes a new message call immediately without creating a transaction on the block chain..
     *
     */
    public function testQanCall()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanChainId
     *
     * Returns the current network/chain ID, used to sign replay-protected transaction introduced in EIP-155..
     *
     */
    public function testQanChainId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanEstimateGas
     *
     * Returns an estimation of gas for a given transaction..
     *
     */
    public function testQanEstimateGas()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanFeeHistory
     *
     * Returns the collection of historical gas information..
     *
     */
    public function testQanFeeHistory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGasPrice
     *
     * Returns the current gas price on the network in wei..
     *
     */
    public function testQanGasPrice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetBalance
     *
     * Returns the balance of the account of given address..
     *
     */
    public function testQanGetBalance()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetBlockByHash
     *
     * Returns information of the block matching the given block hash..
     *
     */
    public function testQanGetBlockByHash()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetBlockByNumber
     *
     * Returns information of the block matching the given block number..
     *
     */
    public function testQanGetBlockByNumber()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetBlockReceipts
     *
     * Returns all transaction receipts for a given block..
     *
     */
    public function testQanGetBlockReceipts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetBlockTransactionCountByHash
     *
     * Returns the number of transactions for the block matching the given block hash..
     *
     */
    public function testQanGetBlockTransactionCountByHash()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetBlockTransactionCountByNumber
     *
     * Returns the number of transactions for the block matching the given block number..
     *
     */
    public function testQanGetBlockTransactionCountByNumber()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetCode
     *
     * Returns the compiled bytecode of a smart contract..
     *
     */
    public function testQanGetCode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetFilterChanges
     *
     * Polling method for a filter, which returns an array of events that have occurred since the last poll..
     *
     */
    public function testQanGetFilterChanges()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetFilterLogs
     *
     * Returns an array of all logs matching filter with given id..
     *
     */
    public function testQanGetFilterLogs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetLogs
     *
     * Returns an array of all logs matching a given filter object..
     *
     */
    public function testQanGetLogs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetProof
     *
     * Returns the account and storage values of the specified account including the Merkle-proof..
     *
     */
    public function testQanGetProof()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetStorageAt
     *
     * Returns the value from a storage position at a given address..
     *
     */
    public function testQanGetStorageAt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetTransactionByBlockHashAndIndex
     *
     * Returns information about a transaction given a blockhash and transaction index position..
     *
     */
    public function testQanGetTransactionByBlockHashAndIndex()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetTransactionByBlockNumberAndIndex
     *
     * Returns information about a transaction given a block number and transaction index position..
     *
     */
    public function testQanGetTransactionByBlockNumberAndIndex()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetTransactionByHash
     *
     * Returns the information about a transaction from a transaction hash..
     *
     */
    public function testQanGetTransactionByHash()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetTransactionCount
     *
     * Returns the number of transactions sent from an address..
     *
     */
    public function testQanGetTransactionCount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanGetTransactionReceipt
     *
     * Returns the receipt of a transaction by transaction hash..
     *
     */
    public function testQanGetTransactionReceipt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanMaxPriorityFeePerGas
     *
     * Get the priority fee needed to be included in a block..
     *
     */
    public function testQanMaxPriorityFeePerGas()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanNewBlockFilter
     *
     * Creates a filter in the node, to notify when a new block arrives..
     *
     */
    public function testQanNewBlockFilter()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanNewFilter
     *
     * Creates a filter object, based on filter options, to notify when the state changes (logs)..
     *
     */
    public function testQanNewFilter()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanNewPendingTransactionFilter
     *
     * Creates a filter in the node to notify when new pending transactions arrive..
     *
     */
    public function testQanNewPendingTransactionFilter()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanSendRawTransaction
     *
     * Creates new message call transaction or a contract creation for signed transactions..
     *
     */
    public function testQanSendRawTransaction()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanSyncing
     *
     * Returns an object with the sync status of the node if the node is out-of-sync and is syncing. Returns null when the node is already in sync..
     *
     */
    public function testQanSyncing()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanUninstallFilter
     *
     * Uninstalls a filter with the given filter id..
     *
     */
    public function testQanUninstallFilter()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for qanXlinkValid
     *
     * Returns the xlink validity time of the account of given address..
     *
     */
    public function testQanXlinkValid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
