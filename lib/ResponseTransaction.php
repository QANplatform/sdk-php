<?php
/**
 * ResponseTransaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  qan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace qan\qan;

use \ArrayAccess;
use \qan\ObjectSerializer;

/**
 * ResponseTransaction Class Doc Comment
 *
 * @category Class
 * @package  qan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResponseTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Response_Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'access_list' => 'string',
        'block_hash' => 'string',
        'block_number' => 'string',
        'chain_id' => 'string',
        'from' => 'string',
        'gas' => 'string',
        'gas_price' => 'string',
        'hash' => 'string',
        'input' => 'string',
        'max_fee_per_gas' => 'string',
        'max_priority_fee_per_gas' => 'string',
        'nonce' => 'string',
        'r' => 'string',
        's' => 'string',
        'to' => 'string',
        'transaction_index' => 'string',
        'type' => 'string',
        'v' => 'string',
        'value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'access_list' => null,
        'block_hash' => null,
        'block_number' => null,
        'chain_id' => null,
        'from' => null,
        'gas' => null,
        'gas_price' => null,
        'hash' => null,
        'input' => null,
        'max_fee_per_gas' => null,
        'max_priority_fee_per_gas' => null,
        'nonce' => null,
        'r' => null,
        's' => null,
        'to' => null,
        'transaction_index' => null,
        'type' => null,
        'v' => null,
        'value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'access_list' => false,
        'block_hash' => false,
        'block_number' => false,
        'chain_id' => false,
        'from' => false,
        'gas' => false,
        'gas_price' => false,
        'hash' => false,
        'input' => false,
        'max_fee_per_gas' => false,
        'max_priority_fee_per_gas' => false,
        'nonce' => false,
        'r' => false,
        's' => false,
        'to' => false,
        'transaction_index' => false,
        'type' => false,
        'v' => false,
        'value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_list' => 'AccessList',
        'block_hash' => 'BlockHash',
        'block_number' => 'BlockNumber',
        'chain_id' => 'ChainId',
        'from' => 'From',
        'gas' => 'Gas',
        'gas_price' => 'GasPrice',
        'hash' => 'Hash',
        'input' => 'Input',
        'max_fee_per_gas' => 'MaxFeePerGas',
        'max_priority_fee_per_gas' => 'MaxPriorityFeePerGas',
        'nonce' => 'Nonce',
        'r' => 'R',
        's' => 'S',
        'to' => 'To',
        'transaction_index' => 'TransactionIndex',
        'type' => 'Type',
        'v' => 'V',
        'value' => 'Value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_list' => 'setAccessList',
        'block_hash' => 'setBlockHash',
        'block_number' => 'setBlockNumber',
        'chain_id' => 'setChainId',
        'from' => 'setFrom',
        'gas' => 'setGas',
        'gas_price' => 'setGasPrice',
        'hash' => 'setHash',
        'input' => 'setInput',
        'max_fee_per_gas' => 'setMaxFeePerGas',
        'max_priority_fee_per_gas' => 'setMaxPriorityFeePerGas',
        'nonce' => 'setNonce',
        'r' => 'setR',
        's' => 'setS',
        'to' => 'setTo',
        'transaction_index' => 'setTransactionIndex',
        'type' => 'setType',
        'v' => 'setV',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_list' => 'getAccessList',
        'block_hash' => 'getBlockHash',
        'block_number' => 'getBlockNumber',
        'chain_id' => 'getChainId',
        'from' => 'getFrom',
        'gas' => 'getGas',
        'gas_price' => 'getGasPrice',
        'hash' => 'getHash',
        'input' => 'getInput',
        'max_fee_per_gas' => 'getMaxFeePerGas',
        'max_priority_fee_per_gas' => 'getMaxPriorityFeePerGas',
        'nonce' => 'getNonce',
        'r' => 'getR',
        's' => 'getS',
        'to' => 'getTo',
        'transaction_index' => 'getTransactionIndex',
        'type' => 'getType',
        'v' => 'getV',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('access_list', $data ?? [], null);
        $this->setIfExists('block_hash', $data ?? [], null);
        $this->setIfExists('block_number', $data ?? [], null);
        $this->setIfExists('chain_id', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('gas', $data ?? [], null);
        $this->setIfExists('gas_price', $data ?? [], null);
        $this->setIfExists('hash', $data ?? [], null);
        $this->setIfExists('input', $data ?? [], null);
        $this->setIfExists('max_fee_per_gas', $data ?? [], null);
        $this->setIfExists('max_priority_fee_per_gas', $data ?? [], null);
        $this->setIfExists('nonce', $data ?? [], null);
        $this->setIfExists('r', $data ?? [], null);
        $this->setIfExists('s', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('transaction_index', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('v', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_list
     *
     * @return string|null
     */
    public function getAccessList()
    {
        return $this->container['access_list'];
    }

    /**
     * Sets access_list
     *
     * @param string|null $access_list A list of addresses and storage keys that the transaction plans to access
     *
     * @return self
     */
    public function setAccessList($access_list)
    {
        if (is_null($access_list)) {
            throw new \InvalidArgumentException('non-nullable access_list cannot be null');
        }
        $this->container['access_list'] = $access_list;

        return $this;
    }

    /**
     * Gets block_hash
     *
     * @return string|null
     */
    public function getBlockHash()
    {
        return $this->container['block_hash'];
    }

    /**
     * Sets block_hash
     *
     * @param string|null $block_hash The hash of the block where this transaction was in. Null when it's a pending transaction
     *
     * @return self
     */
    public function setBlockHash($block_hash)
    {
        if (is_null($block_hash)) {
            throw new \InvalidArgumentException('non-nullable block_hash cannot be null');
        }
        $this->container['block_hash'] = $block_hash;

        return $this;
    }

    /**
     * Gets block_number
     *
     * @return string|null
     */
    public function getBlockNumber()
    {
        return $this->container['block_number'];
    }

    /**
     * Sets block_number
     *
     * @param string|null $block_number The block number where this transaction was in. Null when it's a pending transaction
     *
     * @return self
     */
    public function setBlockNumber($block_number)
    {
        if (is_null($block_number)) {
            throw new \InvalidArgumentException('non-nullable block_number cannot be null');
        }
        $this->container['block_number'] = $block_number;

        return $this;
    }

    /**
     * Gets chain_id
     *
     * @return string|null
     */
    public function getChainId()
    {
        return $this->container['chain_id'];
    }

    /**
     * Sets chain_id
     *
     * @param string|null $chain_id The chain id of the transaction, if any
     *
     * @return self
     */
    public function setChainId($chain_id)
    {
        if (is_null($chain_id)) {
            throw new \InvalidArgumentException('non-nullable chain_id cannot be null');
        }
        $this->container['chain_id'] = $chain_id;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from The address of the sender
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets gas
     *
     * @return string|null
     */
    public function getGas()
    {
        return $this->container['gas'];
    }

    /**
     * Sets gas
     *
     * @param string|null $gas The gas provided by the sender, encoded as decimal
     *
     * @return self
     */
    public function setGas($gas)
    {
        if (is_null($gas)) {
            throw new \InvalidArgumentException('non-nullable gas cannot be null');
        }
        $this->container['gas'] = $gas;

        return $this;
    }

    /**
     * Gets gas_price
     *
     * @return string|null
     */
    public function getGasPrice()
    {
        return $this->container['gas_price'];
    }

    /**
     * Sets gas_price
     *
     * @param string|null $gas_price The gas price provided by the sender in wei encoded as decimal
     *
     * @return self
     */
    public function setGasPrice($gas_price)
    {
        if (is_null($gas_price)) {
            throw new \InvalidArgumentException('non-nullable gas_price cannot be null');
        }
        $this->container['gas_price'] = $gas_price;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string|null $hash The hash of the transaction
     *
     * @return self
     */
    public function setHash($hash)
    {
        if (is_null($hash)) {
            throw new \InvalidArgumentException('non-nullable hash cannot be null');
        }
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets input
     *
     * @return string|null
     */
    public function getInput()
    {
        return $this->container['input'];
    }

    /**
     * Sets input
     *
     * @param string|null $input The data sent along with the transaction
     *
     * @return self
     */
    public function setInput($input)
    {
        if (is_null($input)) {
            throw new \InvalidArgumentException('non-nullable input cannot be null');
        }
        $this->container['input'] = $input;

        return $this;
    }

    /**
     * Gets max_fee_per_gas
     *
     * @return string|null
     */
    public function getMaxFeePerGas()
    {
        return $this->container['max_fee_per_gas'];
    }

    /**
     * Sets max_fee_per_gas
     *
     * @param string|null $max_fee_per_gas The maximum fee per gas set in the transaction
     *
     * @return self
     */
    public function setMaxFeePerGas($max_fee_per_gas)
    {
        if (is_null($max_fee_per_gas)) {
            throw new \InvalidArgumentException('non-nullable max_fee_per_gas cannot be null');
        }
        $this->container['max_fee_per_gas'] = $max_fee_per_gas;

        return $this;
    }

    /**
     * Gets max_priority_fee_per_gas
     *
     * @return string|null
     */
    public function getMaxPriorityFeePerGas()
    {
        return $this->container['max_priority_fee_per_gas'];
    }

    /**
     * Sets max_priority_fee_per_gas
     *
     * @param string|null $max_priority_fee_per_gas The maximum priority gas fee set in the transaction
     *
     * @return self
     */
    public function setMaxPriorityFeePerGas($max_priority_fee_per_gas)
    {
        if (is_null($max_priority_fee_per_gas)) {
            throw new \InvalidArgumentException('non-nullable max_priority_fee_per_gas cannot be null');
        }
        $this->container['max_priority_fee_per_gas'] = $max_priority_fee_per_gas;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return string|null
     */
    public function getNonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param string|null $nonce The number of transactions made by the sender prior to this one encoded as decimal
     *
     * @return self
     */
    public function setNonce($nonce)
    {
        if (is_null($nonce)) {
            throw new \InvalidArgumentException('non-nullable nonce cannot be null');
        }
        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets r
     *
     * @return string|null
     */
    public function getR()
    {
        return $this->container['r'];
    }

    /**
     * Sets r
     *
     * @param string|null $r The R field of the signature
     *
     * @return self
     */
    public function setR($r)
    {
        if (is_null($r)) {
            throw new \InvalidArgumentException('non-nullable r cannot be null');
        }
        $this->container['r'] = $r;

        return $this;
    }

    /**
     * Gets s
     *
     * @return string|null
     */
    public function getS()
    {
        return $this->container['s'];
    }

    /**
     * Sets s
     *
     * @param string|null $s The S field of the signature
     *
     * @return self
     */
    public function setS($s)
    {
        if (is_null($s)) {
            throw new \InvalidArgumentException('non-nullable s cannot be null');
        }
        $this->container['s'] = $s;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to The address of the receiver. Null when its a contract creation transaction
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets transaction_index
     *
     * @return string|null
     */
    public function getTransactionIndex()
    {
        return $this->container['transaction_index'];
    }

    /**
     * Sets transaction_index
     *
     * @param string|null $transaction_index The integer of the transaction's index position that the log was created from. Null when it's a pending log
     *
     * @return self
     */
    public function setTransactionIndex($transaction_index)
    {
        if (is_null($transaction_index)) {
            throw new \InvalidArgumentException('non-nullable transaction_index cannot be null');
        }
        $this->container['transaction_index'] = $transaction_index;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The transaction type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets v
     *
     * @return string|null
     */
    public function getV()
    {
        return $this->container['v'];
    }

    /**
     * Sets v
     *
     * @param string|null $v The standardized V field of the signature
     *
     * @return self
     */
    public function setV($v)
    {
        if (is_null($v)) {
            throw new \InvalidArgumentException('non-nullable v cannot be null');
        }
        $this->container['v'] = $v;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value The value transferred in wei encoded as decimal
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


