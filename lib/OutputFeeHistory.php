<?php
/**
 * OutputFeeHistory
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  qan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace qan\qan;

use \ArrayAccess;
use \qan\ObjectSerializer;

/**
 * OutputFeeHistory Class Doc Comment
 *
 * @category Class
 * @package  qan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OutputFeeHistory implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Output_feeHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'schema' => 'string',
        'base_fee_per_gas' => 'string[]',
        'gas_used_ratio' => 'float[]',
        'oldest_block' => 'string',
        'reward' => 'string[][]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'schema' => 'uri',
        'base_fee_per_gas' => null,
        'gas_used_ratio' => 'double',
        'oldest_block' => null,
        'reward' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'schema' => false,
        'base_fee_per_gas' => false,
        'gas_used_ratio' => false,
        'oldest_block' => false,
        'reward' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'schema' => '$schema',
        'base_fee_per_gas' => 'BaseFeePerGas',
        'gas_used_ratio' => 'GasUsedRatio',
        'oldest_block' => 'OldestBlock',
        'reward' => 'Reward'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'schema' => 'setSchema',
        'base_fee_per_gas' => 'setBaseFeePerGas',
        'gas_used_ratio' => 'setGasUsedRatio',
        'oldest_block' => 'setOldestBlock',
        'reward' => 'setReward'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'schema' => 'getSchema',
        'base_fee_per_gas' => 'getBaseFeePerGas',
        'gas_used_ratio' => 'getGasUsedRatio',
        'oldest_block' => 'getOldestBlock',
        'reward' => 'getReward'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('schema', $data ?? [], null);
        $this->setIfExists('base_fee_per_gas', $data ?? [], null);
        $this->setIfExists('gas_used_ratio', $data ?? [], null);
        $this->setIfExists('oldest_block', $data ?? [], null);
        $this->setIfExists('reward', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['base_fee_per_gas'] === null) {
            $invalidProperties[] = "'base_fee_per_gas' can't be null";
        }
        if ($this->container['gas_used_ratio'] === null) {
            $invalidProperties[] = "'gas_used_ratio' can't be null";
        }
        if ($this->container['oldest_block'] === null) {
            $invalidProperties[] = "'oldest_block' can't be null";
        }
        if ($this->container['reward'] === null) {
            $invalidProperties[] = "'reward' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets schema
     *
     * @return string|null
     */
    public function getSchema()
    {
        return $this->container['schema'];
    }

    /**
     * Sets schema
     *
     * @param string|null $schema A URL to the JSON Schema for this object.
     *
     * @return self
     */
    public function setSchema($schema)
    {
        if (is_null($schema)) {
            throw new \InvalidArgumentException('non-nullable schema cannot be null');
        }
        $this->container['schema'] = $schema;

        return $this;
    }

    /**
     * Gets base_fee_per_gas
     *
     * @return string[]
     */
    public function getBaseFeePerGas()
    {
        return $this->container['base_fee_per_gas'];
    }

    /**
     * Sets base_fee_per_gas
     *
     * @param string[] $base_fee_per_gas An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks
     *
     * @return self
     */
    public function setBaseFeePerGas($base_fee_per_gas)
    {
        if (is_null($base_fee_per_gas)) {
            throw new \InvalidArgumentException('non-nullable base_fee_per_gas cannot be null');
        }
        $this->container['base_fee_per_gas'] = $base_fee_per_gas;

        return $this;
    }

    /**
     * Gets gas_used_ratio
     *
     * @return float[]
     */
    public function getGasUsedRatio()
    {
        return $this->container['gas_used_ratio'];
    }

    /**
     * Sets gas_used_ratio
     *
     * @param float[] $gas_used_ratio An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit
     *
     * @return self
     */
    public function setGasUsedRatio($gas_used_ratio)
    {
        if (is_null($gas_used_ratio)) {
            throw new \InvalidArgumentException('non-nullable gas_used_ratio cannot be null');
        }
        $this->container['gas_used_ratio'] = $gas_used_ratio;

        return $this;
    }

    /**
     * Gets oldest_block
     *
     * @return string
     */
    public function getOldestBlock()
    {
        return $this->container['oldest_block'];
    }

    /**
     * Sets oldest_block
     *
     * @param string $oldest_block The lowest number block of the returned range encoded in decimal format
     *
     * @return self
     */
    public function setOldestBlock($oldest_block)
    {
        if (is_null($oldest_block)) {
            throw new \InvalidArgumentException('non-nullable oldest_block cannot be null');
        }
        $this->container['oldest_block'] = $oldest_block;

        return $this;
    }

    /**
     * Gets reward
     *
     * @return string[][]
     */
    public function getReward()
    {
        return $this->container['reward'];
    }

    /**
     * Sets reward
     *
     * @param string[][] $reward An array of effective priority fees per gas data points from a single block. All zeroes are returned if the block is empty
     *
     * @return self
     */
    public function setReward($reward)
    {
        if (is_null($reward)) {
            throw new \InvalidArgumentException('non-nullable reward cannot be null');
        }
        $this->container['reward'] = $reward;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


