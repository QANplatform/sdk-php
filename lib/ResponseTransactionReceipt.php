<?php
/**
 * ResponseTransactionReceipt
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  qan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace qan\qan;

use \ArrayAccess;
use \qan\ObjectSerializer;

/**
 * ResponseTransactionReceipt Class Doc Comment
 *
 * @category Class
 * @package  qan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResponseTransactionReceipt implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Response_TransactionReceipt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'block_hash' => 'string',
        'block_number' => 'string',
        'contract_address' => 'string',
        'cumulative_gas_used' => 'string',
        'effective_gas_price' => 'string',
        'from' => 'string',
        'gas_used' => 'string',
        'logs' => '\qan\qan\ResponseLog[]',
        'logs_bloom' => 'string',
        'status' => 'string',
        'to' => 'string',
        'transaction_hash' => 'string',
        'transaction_index' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'block_hash' => null,
        'block_number' => null,
        'contract_address' => null,
        'cumulative_gas_used' => null,
        'effective_gas_price' => null,
        'from' => null,
        'gas_used' => null,
        'logs' => null,
        'logs_bloom' => null,
        'status' => null,
        'to' => null,
        'transaction_hash' => null,
        'transaction_index' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'block_hash' => false,
        'block_number' => false,
        'contract_address' => false,
        'cumulative_gas_used' => false,
        'effective_gas_price' => false,
        'from' => false,
        'gas_used' => false,
        'logs' => false,
        'logs_bloom' => false,
        'status' => false,
        'to' => false,
        'transaction_hash' => false,
        'transaction_index' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'block_hash' => 'BlockHash',
        'block_number' => 'BlockNumber',
        'contract_address' => 'ContractAddress',
        'cumulative_gas_used' => 'CumulativeGasUsed',
        'effective_gas_price' => 'EffectiveGasPrice',
        'from' => 'From',
        'gas_used' => 'GasUsed',
        'logs' => 'Logs',
        'logs_bloom' => 'LogsBloom',
        'status' => 'Status',
        'to' => 'To',
        'transaction_hash' => 'TransactionHash',
        'transaction_index' => 'TransactionIndex',
        'type' => 'Type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'block_hash' => 'setBlockHash',
        'block_number' => 'setBlockNumber',
        'contract_address' => 'setContractAddress',
        'cumulative_gas_used' => 'setCumulativeGasUsed',
        'effective_gas_price' => 'setEffectiveGasPrice',
        'from' => 'setFrom',
        'gas_used' => 'setGasUsed',
        'logs' => 'setLogs',
        'logs_bloom' => 'setLogsBloom',
        'status' => 'setStatus',
        'to' => 'setTo',
        'transaction_hash' => 'setTransactionHash',
        'transaction_index' => 'setTransactionIndex',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'block_hash' => 'getBlockHash',
        'block_number' => 'getBlockNumber',
        'contract_address' => 'getContractAddress',
        'cumulative_gas_used' => 'getCumulativeGasUsed',
        'effective_gas_price' => 'getEffectiveGasPrice',
        'from' => 'getFrom',
        'gas_used' => 'getGasUsed',
        'logs' => 'getLogs',
        'logs_bloom' => 'getLogsBloom',
        'status' => 'getStatus',
        'to' => 'getTo',
        'transaction_hash' => 'getTransactionHash',
        'transaction_index' => 'getTransactionIndex',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('block_hash', $data ?? [], null);
        $this->setIfExists('block_number', $data ?? [], null);
        $this->setIfExists('contract_address', $data ?? [], null);
        $this->setIfExists('cumulative_gas_used', $data ?? [], null);
        $this->setIfExists('effective_gas_price', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('gas_used', $data ?? [], null);
        $this->setIfExists('logs', $data ?? [], null);
        $this->setIfExists('logs_bloom', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('transaction_hash', $data ?? [], null);
        $this->setIfExists('transaction_index', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets block_hash
     *
     * @return string|null
     */
    public function getBlockHash()
    {
        return $this->container['block_hash'];
    }

    /**
     * Sets block_hash
     *
     * @param string|null $block_hash The hash of the block. null when pending
     *
     * @return self
     */
    public function setBlockHash($block_hash)
    {
        if (is_null($block_hash)) {
            throw new \InvalidArgumentException('non-nullable block_hash cannot be null');
        }
        $this->container['block_hash'] = $block_hash;

        return $this;
    }

    /**
     * Gets block_number
     *
     * @return string|null
     */
    public function getBlockNumber()
    {
        return $this->container['block_number'];
    }

    /**
     * Sets block_number
     *
     * @param string|null $block_number block_number
     *
     * @return self
     */
    public function setBlockNumber($block_number)
    {
        if (is_null($block_number)) {
            throw new \InvalidArgumentException('non-nullable block_number cannot be null');
        }
        $this->container['block_number'] = $block_number;

        return $this;
    }

    /**
     * Gets contract_address
     *
     * @return string|null
     */
    public function getContractAddress()
    {
        return $this->container['contract_address'];
    }

    /**
     * Sets contract_address
     *
     * @param string|null $contract_address The contract address created if the transaction was a contract creation, otherwise null
     *
     * @return self
     */
    public function setContractAddress($contract_address)
    {
        if (is_null($contract_address)) {
            throw new \InvalidArgumentException('non-nullable contract_address cannot be null');
        }
        $this->container['contract_address'] = $contract_address;

        return $this;
    }

    /**
     * Gets cumulative_gas_used
     *
     * @return string|null
     */
    public function getCumulativeGasUsed()
    {
        return $this->container['cumulative_gas_used'];
    }

    /**
     * Sets cumulative_gas_used
     *
     * @param string|null $cumulative_gas_used The total amount of gas used when this transaction was executed in the block
     *
     * @return self
     */
    public function setCumulativeGasUsed($cumulative_gas_used)
    {
        if (is_null($cumulative_gas_used)) {
            throw new \InvalidArgumentException('non-nullable cumulative_gas_used cannot be null');
        }
        $this->container['cumulative_gas_used'] = $cumulative_gas_used;

        return $this;
    }

    /**
     * Gets effective_gas_price
     *
     * @return string|null
     */
    public function getEffectiveGasPrice()
    {
        return $this->container['effective_gas_price'];
    }

    /**
     * Sets effective_gas_price
     *
     * @param string|null $effective_gas_price The actual value per gas deducted from the sender account
     *
     * @return self
     */
    public function setEffectiveGasPrice($effective_gas_price)
    {
        if (is_null($effective_gas_price)) {
            throw new \InvalidArgumentException('non-nullable effective_gas_price cannot be null');
        }
        $this->container['effective_gas_price'] = $effective_gas_price;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from The address of the sender
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets gas_used
     *
     * @return string|null
     */
    public function getGasUsed()
    {
        return $this->container['gas_used'];
    }

    /**
     * Sets gas_used
     *
     * @param string|null $gas_used The amount of gas used by this specific transaction alone
     *
     * @return self
     */
    public function setGasUsed($gas_used)
    {
        if (is_null($gas_used)) {
            throw new \InvalidArgumentException('non-nullable gas_used cannot be null');
        }
        $this->container['gas_used'] = $gas_used;

        return $this;
    }

    /**
     * Gets logs
     *
     * @return \qan\qan\ResponseLog[]|null
     */
    public function getLogs()
    {
        return $this->container['logs'];
    }

    /**
     * Sets logs
     *
     * @param \qan\qan\ResponseLog[]|null $logs An array of log objects that generated this transaction
     *
     * @return self
     */
    public function setLogs($logs)
    {
        if (is_null($logs)) {
            throw new \InvalidArgumentException('non-nullable logs cannot be null');
        }
        $this->container['logs'] = $logs;

        return $this;
    }

    /**
     * Gets logs_bloom
     *
     * @return string|null
     */
    public function getLogsBloom()
    {
        return $this->container['logs_bloom'];
    }

    /**
     * Sets logs_bloom
     *
     * @param string|null $logs_bloom The bloom filter for light clients to quickly retrieve related logs
     *
     * @return self
     */
    public function setLogsBloom($logs_bloom)
    {
        if (is_null($logs_bloom)) {
            throw new \InvalidArgumentException('non-nullable logs_bloom cannot be null');
        }
        $this->container['logs_bloom'] = $logs_bloom;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status It is either 1 (success) or 0 (failure) encoded as a decimal
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to The address of the receiver. null when it's a contract creation transaction
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets transaction_hash
     *
     * @return string|null
     */
    public function getTransactionHash()
    {
        return $this->container['transaction_hash'];
    }

    /**
     * Sets transaction_hash
     *
     * @param string|null $transaction_hash The hash of the transaction
     *
     * @return self
     */
    public function setTransactionHash($transaction_hash)
    {
        if (is_null($transaction_hash)) {
            throw new \InvalidArgumentException('non-nullable transaction_hash cannot be null');
        }
        $this->container['transaction_hash'] = $transaction_hash;

        return $this;
    }

    /**
     * Gets transaction_index
     *
     * @return string|null
     */
    public function getTransactionIndex()
    {
        return $this->container['transaction_index'];
    }

    /**
     * Sets transaction_index
     *
     * @param string|null $transaction_index An index of the transaction in the block
     *
     * @return self
     */
    public function setTransactionIndex($transaction_index)
    {
        if (is_null($transaction_index)) {
            throw new \InvalidArgumentException('non-nullable transaction_index cannot be null');
        }
        $this->container['transaction_index'] = $transaction_index;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The value type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


