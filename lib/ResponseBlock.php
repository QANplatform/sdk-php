<?php
/**
 * ResponseBlock
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  qan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * QAN AutoApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace qan\qan;

use \ArrayAccess;
use \qan\ObjectSerializer;

/**
 * ResponseBlock Class Doc Comment
 *
 * @category Class
 * @package  qan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResponseBlock implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Response_Block';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'base_fee_per_gas' => 'string',
        'difficulty' => 'string',
        'extra_data' => 'string',
        'gas_limit' => 'string',
        'gas_used' => 'string',
        'hash' => 'string',
        'logs_bloom' => 'string',
        'miner' => 'string',
        'mix_hash' => 'string',
        'nonce' => 'string',
        'number' => 'string',
        'parent_hash' => 'string',
        'receipts_root' => 'string',
        'sha3_uncles' => 'string',
        'size' => 'string',
        'state_root' => 'string',
        'timestamp' => 'string',
        'total_difficulty' => 'string',
        'transactions' => '\qan\qan\ResponseTransaction[]',
        'transactions_root' => 'string',
        'uncles' => 'string[]',
        'withdrawals' => '\qan\qan\ResponseWithdrawals',
        'withdrawals_root' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'base_fee_per_gas' => null,
        'difficulty' => null,
        'extra_data' => null,
        'gas_limit' => null,
        'gas_used' => null,
        'hash' => null,
        'logs_bloom' => null,
        'miner' => null,
        'mix_hash' => null,
        'nonce' => null,
        'number' => null,
        'parent_hash' => null,
        'receipts_root' => null,
        'sha3_uncles' => null,
        'size' => null,
        'state_root' => null,
        'timestamp' => null,
        'total_difficulty' => null,
        'transactions' => null,
        'transactions_root' => null,
        'uncles' => null,
        'withdrawals' => null,
        'withdrawals_root' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'base_fee_per_gas' => true,
        'difficulty' => false,
        'extra_data' => false,
        'gas_limit' => false,
        'gas_used' => false,
        'hash' => true,
        'logs_bloom' => true,
        'miner' => false,
        'mix_hash' => false,
        'nonce' => true,
        'number' => true,
        'parent_hash' => false,
        'receipts_root' => false,
        'sha3_uncles' => false,
        'size' => false,
        'state_root' => false,
        'timestamp' => false,
        'total_difficulty' => false,
        'transactions' => false,
        'transactions_root' => false,
        'uncles' => false,
        'withdrawals' => false,
        'withdrawals_root' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_fee_per_gas' => 'BaseFeePerGas',
        'difficulty' => 'Difficulty',
        'extra_data' => 'ExtraData',
        'gas_limit' => 'GasLimit',
        'gas_used' => 'GasUsed',
        'hash' => 'Hash',
        'logs_bloom' => 'LogsBloom',
        'miner' => 'Miner',
        'mix_hash' => 'MixHash',
        'nonce' => 'Nonce',
        'number' => 'Number',
        'parent_hash' => 'ParentHash',
        'receipts_root' => 'ReceiptsRoot',
        'sha3_uncles' => 'Sha3Uncles',
        'size' => 'Size',
        'state_root' => 'StateRoot',
        'timestamp' => 'Timestamp',
        'total_difficulty' => 'TotalDifficulty',
        'transactions' => 'Transactions',
        'transactions_root' => 'TransactionsRoot',
        'uncles' => 'Uncles',
        'withdrawals' => 'Withdrawals',
        'withdrawals_root' => 'WithdrawalsRoot'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_fee_per_gas' => 'setBaseFeePerGas',
        'difficulty' => 'setDifficulty',
        'extra_data' => 'setExtraData',
        'gas_limit' => 'setGasLimit',
        'gas_used' => 'setGasUsed',
        'hash' => 'setHash',
        'logs_bloom' => 'setLogsBloom',
        'miner' => 'setMiner',
        'mix_hash' => 'setMixHash',
        'nonce' => 'setNonce',
        'number' => 'setNumber',
        'parent_hash' => 'setParentHash',
        'receipts_root' => 'setReceiptsRoot',
        'sha3_uncles' => 'setSha3Uncles',
        'size' => 'setSize',
        'state_root' => 'setStateRoot',
        'timestamp' => 'setTimestamp',
        'total_difficulty' => 'setTotalDifficulty',
        'transactions' => 'setTransactions',
        'transactions_root' => 'setTransactionsRoot',
        'uncles' => 'setUncles',
        'withdrawals' => 'setWithdrawals',
        'withdrawals_root' => 'setWithdrawalsRoot'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_fee_per_gas' => 'getBaseFeePerGas',
        'difficulty' => 'getDifficulty',
        'extra_data' => 'getExtraData',
        'gas_limit' => 'getGasLimit',
        'gas_used' => 'getGasUsed',
        'hash' => 'getHash',
        'logs_bloom' => 'getLogsBloom',
        'miner' => 'getMiner',
        'mix_hash' => 'getMixHash',
        'nonce' => 'getNonce',
        'number' => 'getNumber',
        'parent_hash' => 'getParentHash',
        'receipts_root' => 'getReceiptsRoot',
        'sha3_uncles' => 'getSha3Uncles',
        'size' => 'getSize',
        'state_root' => 'getStateRoot',
        'timestamp' => 'getTimestamp',
        'total_difficulty' => 'getTotalDifficulty',
        'transactions' => 'getTransactions',
        'transactions_root' => 'getTransactionsRoot',
        'uncles' => 'getUncles',
        'withdrawals' => 'getWithdrawals',
        'withdrawals_root' => 'getWithdrawalsRoot'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('base_fee_per_gas', $data ?? [], null);
        $this->setIfExists('difficulty', $data ?? [], null);
        $this->setIfExists('extra_data', $data ?? [], null);
        $this->setIfExists('gas_limit', $data ?? [], null);
        $this->setIfExists('gas_used', $data ?? [], null);
        $this->setIfExists('hash', $data ?? [], null);
        $this->setIfExists('logs_bloom', $data ?? [], null);
        $this->setIfExists('miner', $data ?? [], null);
        $this->setIfExists('mix_hash', $data ?? [], null);
        $this->setIfExists('nonce', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('parent_hash', $data ?? [], null);
        $this->setIfExists('receipts_root', $data ?? [], null);
        $this->setIfExists('sha3_uncles', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('state_root', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('total_difficulty', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
        $this->setIfExists('transactions_root', $data ?? [], null);
        $this->setIfExists('uncles', $data ?? [], null);
        $this->setIfExists('withdrawals', $data ?? [], null);
        $this->setIfExists('withdrawals_root', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['base_fee_per_gas'] === null) {
            $invalidProperties[] = "'base_fee_per_gas' can't be null";
        }
        if ($this->container['difficulty'] === null) {
            $invalidProperties[] = "'difficulty' can't be null";
        }
        if ($this->container['extra_data'] === null) {
            $invalidProperties[] = "'extra_data' can't be null";
        }
        if ($this->container['gas_limit'] === null) {
            $invalidProperties[] = "'gas_limit' can't be null";
        }
        if ($this->container['gas_used'] === null) {
            $invalidProperties[] = "'gas_used' can't be null";
        }
        if ($this->container['hash'] === null) {
            $invalidProperties[] = "'hash' can't be null";
        }
        if ($this->container['logs_bloom'] === null) {
            $invalidProperties[] = "'logs_bloom' can't be null";
        }
        if ($this->container['miner'] === null) {
            $invalidProperties[] = "'miner' can't be null";
        }
        if ($this->container['mix_hash'] === null) {
            $invalidProperties[] = "'mix_hash' can't be null";
        }
        if ($this->container['nonce'] === null) {
            $invalidProperties[] = "'nonce' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['parent_hash'] === null) {
            $invalidProperties[] = "'parent_hash' can't be null";
        }
        if ($this->container['receipts_root'] === null) {
            $invalidProperties[] = "'receipts_root' can't be null";
        }
        if ($this->container['sha3_uncles'] === null) {
            $invalidProperties[] = "'sha3_uncles' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['state_root'] === null) {
            $invalidProperties[] = "'state_root' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['total_difficulty'] === null) {
            $invalidProperties[] = "'total_difficulty' can't be null";
        }
        if ($this->container['transactions'] === null) {
            $invalidProperties[] = "'transactions' can't be null";
        }
        if ($this->container['transactions_root'] === null) {
            $invalidProperties[] = "'transactions_root' can't be null";
        }
        if ($this->container['uncles'] === null) {
            $invalidProperties[] = "'uncles' can't be null";
        }
        if ($this->container['withdrawals'] === null) {
            $invalidProperties[] = "'withdrawals' can't be null";
        }
        if ($this->container['withdrawals_root'] === null) {
            $invalidProperties[] = "'withdrawals_root' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_fee_per_gas
     *
     * @return string
     */
    public function getBaseFeePerGas()
    {
        return $this->container['base_fee_per_gas'];
    }

    /**
     * Sets base_fee_per_gas
     *
     * @param string $base_fee_per_gas A string of the base fee encoded in decimal format. Please note that this response field will not be included in a block requested before the EIP-1559 upgrade
     *
     * @return self
     */
    public function setBaseFeePerGas($base_fee_per_gas)
    {
        if (is_null($base_fee_per_gas)) {
            array_push($this->openAPINullablesSetToNull, 'base_fee_per_gas');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('base_fee_per_gas', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['base_fee_per_gas'] = $base_fee_per_gas;

        return $this;
    }

    /**
     * Gets difficulty
     *
     * @return string
     */
    public function getDifficulty()
    {
        return $this->container['difficulty'];
    }

    /**
     * Sets difficulty
     *
     * @param string $difficulty The integer of the difficulty for this block encoded as a decimal
     *
     * @return self
     */
    public function setDifficulty($difficulty)
    {
        if (is_null($difficulty)) {
            throw new \InvalidArgumentException('non-nullable difficulty cannot be null');
        }
        $this->container['difficulty'] = $difficulty;

        return $this;
    }

    /**
     * Gets extra_data
     *
     * @return string
     */
    public function getExtraData()
    {
        return $this->container['extra_data'];
    }

    /**
     * Sets extra_data
     *
     * @param string $extra_data The “extra data” field of this block
     *
     * @return self
     */
    public function setExtraData($extra_data)
    {
        if (is_null($extra_data)) {
            throw new \InvalidArgumentException('non-nullable extra_data cannot be null');
        }
        $this->container['extra_data'] = $extra_data;

        return $this;
    }

    /**
     * Gets gas_limit
     *
     * @return string
     */
    public function getGasLimit()
    {
        return $this->container['gas_limit'];
    }

    /**
     * Sets gas_limit
     *
     * @param string $gas_limit The maximum gas allowed in this block encoded as a decimal
     *
     * @return self
     */
    public function setGasLimit($gas_limit)
    {
        if (is_null($gas_limit)) {
            throw new \InvalidArgumentException('non-nullable gas_limit cannot be null');
        }
        $this->container['gas_limit'] = $gas_limit;

        return $this;
    }

    /**
     * Gets gas_used
     *
     * @return string
     */
    public function getGasUsed()
    {
        return $this->container['gas_used'];
    }

    /**
     * Sets gas_used
     *
     * @param string $gas_used The total used gas by all transactions in this block encoded as a decimal
     *
     * @return self
     */
    public function setGasUsed($gas_used)
    {
        if (is_null($gas_used)) {
            throw new \InvalidArgumentException('non-nullable gas_used cannot be null');
        }
        $this->container['gas_used'] = $gas_used;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash The block hash of the requested block. null if pending
     *
     * @return self
     */
    public function setHash($hash)
    {
        if (is_null($hash)) {
            array_push($this->openAPINullablesSetToNull, 'hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets logs_bloom
     *
     * @return string
     */
    public function getLogsBloom()
    {
        return $this->container['logs_bloom'];
    }

    /**
     * Sets logs_bloom
     *
     * @param string $logs_bloom The bloom filter for the logs of the block. null if pending
     *
     * @return self
     */
    public function setLogsBloom($logs_bloom)
    {
        if (is_null($logs_bloom)) {
            array_push($this->openAPINullablesSetToNull, 'logs_bloom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logs_bloom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logs_bloom'] = $logs_bloom;

        return $this;
    }

    /**
     * Gets miner
     *
     * @return string
     */
    public function getMiner()
    {
        return $this->container['miner'];
    }

    /**
     * Sets miner
     *
     * @param string $miner The address of the beneficiary to whom the mining rewards were given
     *
     * @return self
     */
    public function setMiner($miner)
    {
        if (is_null($miner)) {
            throw new \InvalidArgumentException('non-nullable miner cannot be null');
        }
        $this->container['miner'] = $miner;

        return $this;
    }

    /**
     * Gets mix_hash
     *
     * @return string
     */
    public function getMixHash()
    {
        return $this->container['mix_hash'];
    }

    /**
     * Sets mix_hash
     *
     * @param string $mix_hash A string of a 256-bit hash encoded as a decimal
     *
     * @return self
     */
    public function setMixHash($mix_hash)
    {
        if (is_null($mix_hash)) {
            throw new \InvalidArgumentException('non-nullable mix_hash cannot be null');
        }
        $this->container['mix_hash'] = $mix_hash;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return string
     */
    public function getNonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param string $nonce The hash of the generated proof-of-work. null if pending
     *
     * @return self
     */
    public function setNonce($nonce)
    {
        if (is_null($nonce)) {
            array_push($this->openAPINullablesSetToNull, 'nonce');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nonce', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number The block number of the requested block encoded as a decimal. null if pending
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            array_push($this->openAPINullablesSetToNull, 'number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets parent_hash
     *
     * @return string
     */
    public function getParentHash()
    {
        return $this->container['parent_hash'];
    }

    /**
     * Sets parent_hash
     *
     * @param string $parent_hash The hash of the parent block
     *
     * @return self
     */
    public function setParentHash($parent_hash)
    {
        if (is_null($parent_hash)) {
            throw new \InvalidArgumentException('non-nullable parent_hash cannot be null');
        }
        $this->container['parent_hash'] = $parent_hash;

        return $this;
    }

    /**
     * Gets receipts_root
     *
     * @return string
     */
    public function getReceiptsRoot()
    {
        return $this->container['receipts_root'];
    }

    /**
     * Sets receipts_root
     *
     * @param string $receipts_root The root of the receipts trie of the bloc
     *
     * @return self
     */
    public function setReceiptsRoot($receipts_root)
    {
        if (is_null($receipts_root)) {
            throw new \InvalidArgumentException('non-nullable receipts_root cannot be null');
        }
        $this->container['receipts_root'] = $receipts_root;

        return $this;
    }

    /**
     * Gets sha3_uncles
     *
     * @return string
     */
    public function getSha3Uncles()
    {
        return $this->container['sha3_uncles'];
    }

    /**
     * Sets sha3_uncles
     *
     * @param string $sha3_uncles The SHA3 of the uncles data in the block
     *
     * @return self
     */
    public function setSha3Uncles($sha3_uncles)
    {
        if (is_null($sha3_uncles)) {
            throw new \InvalidArgumentException('non-nullable sha3_uncles cannot be null');
        }
        $this->container['sha3_uncles'] = $sha3_uncles;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string $size The size of this block in bytes as an Integer value encoded as decimal
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets state_root
     *
     * @return string
     */
    public function getStateRoot()
    {
        return $this->container['state_root'];
    }

    /**
     * Sets state_root
     *
     * @param string $state_root The root of the final state trie of the block
     *
     * @return self
     */
    public function setStateRoot($state_root)
    {
        if (is_null($state_root)) {
            throw new \InvalidArgumentException('non-nullable state_root cannot be null');
        }
        $this->container['state_root'] = $state_root;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp The unix timestamp for when the block was collated
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets total_difficulty
     *
     * @return string
     */
    public function getTotalDifficulty()
    {
        return $this->container['total_difficulty'];
    }

    /**
     * Sets total_difficulty
     *
     * @param string $total_difficulty The integer of the total difficulty of the chain until this block encoded as a decimal
     *
     * @return self
     */
    public function setTotalDifficulty($total_difficulty)
    {
        if (is_null($total_difficulty)) {
            throw new \InvalidArgumentException('non-nullable total_difficulty cannot be null');
        }
        $this->container['total_difficulty'] = $total_difficulty;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \qan\qan\ResponseTransaction[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \qan\qan\ResponseTransaction[] $transactions An array of transaction objects - please see getTransactionByHash for exact shape
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            throw new \InvalidArgumentException('non-nullable transactions cannot be null');
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets transactions_root
     *
     * @return string
     */
    public function getTransactionsRoot()
    {
        return $this->container['transactions_root'];
    }

    /**
     * Sets transactions_root
     *
     * @param string $transactions_root The root of the transaction trie of the block
     *
     * @return self
     */
    public function setTransactionsRoot($transactions_root)
    {
        if (is_null($transactions_root)) {
            throw new \InvalidArgumentException('non-nullable transactions_root cannot be null');
        }
        $this->container['transactions_root'] = $transactions_root;

        return $this;
    }

    /**
     * Gets uncles
     *
     * @return string[]
     */
    public function getUncles()
    {
        return $this->container['uncles'];
    }

    /**
     * Sets uncles
     *
     * @param string[] $uncles An array of uncle hashes
     *
     * @return self
     */
    public function setUncles($uncles)
    {
        if (is_null($uncles)) {
            throw new \InvalidArgumentException('non-nullable uncles cannot be null');
        }
        $this->container['uncles'] = $uncles;

        return $this;
    }

    /**
     * Gets withdrawals
     *
     * @return \qan\qan\ResponseWithdrawals
     */
    public function getWithdrawals()
    {
        return $this->container['withdrawals'];
    }

    /**
     * Sets withdrawals
     *
     * @param \qan\qan\ResponseWithdrawals $withdrawals A withdrawals object contains information about withdrawals made by validators. Please note that this field will not be included in a block requested before the EIP-4895 upgrade
     *
     * @return self
     */
    public function setWithdrawals($withdrawals)
    {
        if (is_null($withdrawals)) {
            throw new \InvalidArgumentException('non-nullable withdrawals cannot be null');
        }
        $this->container['withdrawals'] = $withdrawals;

        return $this;
    }

    /**
     * Gets withdrawals_root
     *
     * @return string
     */
    public function getWithdrawalsRoot()
    {
        return $this->container['withdrawals_root'];
    }

    /**
     * Sets withdrawals_root
     *
     * @param string $withdrawals_root The Merkle root of withdrawal data. Also, please note that this field will not be included in a block requested before the EIP-4895 upgrade
     *
     * @return self
     */
    public function setWithdrawalsRoot($withdrawals_root)
    {
        if (is_null($withdrawals_root)) {
            array_push($this->openAPINullablesSetToNull, 'withdrawals_root');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('withdrawals_root', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['withdrawals_root'] = $withdrawals_root;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


